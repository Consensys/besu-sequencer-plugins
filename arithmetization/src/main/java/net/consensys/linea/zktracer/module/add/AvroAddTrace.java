/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package net.consensys.linea.zktracer.module.add;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class AvroAddTrace extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6549840324858740799L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AvroAddTrace\",\"namespace\":\"net.consensys.linea.zktracer\",\"fields\":[{\"name\":\"ACC1\",\"type\":\"long\"},{\"name\":\"ACC2\",\"type\":\"long\"},{\"name\":\"ARG1HI\",\"type\":\"long\"},{\"name\":\"ARG1LO\",\"type\":\"long\"},{\"name\":\"ARG2HI\",\"type\":\"long\"},{\"name\":\"ARG2LO\",\"type\":\"long\"},{\"name\":\"BYTE1\",\"type\":\"bytes\"},{\"name\":\"BYTE2\",\"type\":\"bytes\"},{\"name\":\"CT\",\"type\":\"long\"},{\"name\":\"INST\",\"type\":\"long\"},{\"name\":\"OVERFLOW\",\"type\":\"boolean\"},{\"name\":\"RESHI\",\"type\":\"long\"},{\"name\":\"RESLO\",\"type\":\"long\"},{\"name\":\"STAMP\",\"type\":\"long\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AvroAddTrace> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AvroAddTrace> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AvroAddTrace> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AvroAddTrace> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AvroAddTrace> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AvroAddTrace to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AvroAddTrace from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AvroAddTrace instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AvroAddTrace fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private long ACC1;
  private long ACC2;
  private long ARG1HI;
  private long ARG1LO;
  private long ARG2HI;
  private long ARG2LO;
  private java.nio.ByteBuffer BYTE1;
  private java.nio.ByteBuffer BYTE2;
  private long CT;
  private long INST;
  private boolean OVERFLOW;
  private long RESHI;
  private long RESLO;
  private long STAMP;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AvroAddTrace() {}

  /**
   * All-args constructor.
   * @param ACC1 The new value for ACC1
   * @param ACC2 The new value for ACC2
   * @param ARG1HI The new value for ARG1HI
   * @param ARG1LO The new value for ARG1LO
   * @param ARG2HI The new value for ARG2HI
   * @param ARG2LO The new value for ARG2LO
   * @param BYTE1 The new value for BYTE1
   * @param BYTE2 The new value for BYTE2
   * @param CT The new value for CT
   * @param INST The new value for INST
   * @param OVERFLOW The new value for OVERFLOW
   * @param RESHI The new value for RESHI
   * @param RESLO The new value for RESLO
   * @param STAMP The new value for STAMP
   */
  public AvroAddTrace(Long ACC1, Long ACC2, Long ARG1HI, Long ARG1LO, Long ARG2HI, Long ARG2LO, java.nio.ByteBuffer BYTE1, java.nio.ByteBuffer BYTE2, Long CT, Long INST, Boolean OVERFLOW, Long RESHI, Long RESLO, Long STAMP) {
    this.ACC1 = ACC1;
    this.ACC2 = ACC2;
    this.ARG1HI = ARG1HI;
    this.ARG1LO = ARG1LO;
    this.ARG2HI = ARG2HI;
    this.ARG2LO = ARG2LO;
    this.BYTE1 = BYTE1;
    this.BYTE2 = BYTE2;
    this.CT = CT;
    this.INST = INST;
    this.OVERFLOW = OVERFLOW;
    this.RESHI = RESHI;
    this.RESLO = RESLO;
    this.STAMP = STAMP;
  }

  @Override
  public SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public Object get(int field$) {
    switch (field$) {
    case 0: return ACC1;
    case 1: return ACC2;
    case 2: return ARG1HI;
    case 3: return ARG1LO;
    case 4: return ARG2HI;
    case 5: return ARG2LO;
    case 6: return BYTE1;
    case 7: return BYTE2;
    case 8: return CT;
    case 9: return INST;
    case 10: return OVERFLOW;
    case 11: return RESHI;
    case 12: return RESLO;
    case 13: return STAMP;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: ACC1 = (Long)value$; break;
    case 1: ACC2 = (Long)value$; break;
    case 2: ARG1HI = (Long)value$; break;
    case 3: ARG1LO = (Long)value$; break;
    case 4: ARG2HI = (Long)value$; break;
    case 5: ARG2LO = (Long)value$; break;
    case 6: BYTE1 = (java.nio.ByteBuffer)value$; break;
    case 7: BYTE2 = (java.nio.ByteBuffer)value$; break;
    case 8: CT = (Long)value$; break;
    case 9: INST = (Long)value$; break;
    case 10: OVERFLOW = (Boolean)value$; break;
    case 11: RESHI = (Long)value$; break;
    case 12: RESLO = (Long)value$; break;
    case 13: STAMP = (Long)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'ACC1' field.
   * @return The value of the 'ACC1' field.
   */
  public long getACC1() {
    return ACC1;
  }


  /**
   * Sets the value of the 'ACC1' field.
   * @param value the value to set.
   */
  public void setACC1(long value) {
    this.ACC1 = value;
  }

  /**
   * Gets the value of the 'ACC2' field.
   * @return The value of the 'ACC2' field.
   */
  public long getACC2() {
    return ACC2;
  }


  /**
   * Sets the value of the 'ACC2' field.
   * @param value the value to set.
   */
  public void setACC2(long value) {
    this.ACC2 = value;
  }

  /**
   * Gets the value of the 'ARG1HI' field.
   * @return The value of the 'ARG1HI' field.
   */
  public long getARG1HI() {
    return ARG1HI;
  }


  /**
   * Sets the value of the 'ARG1HI' field.
   * @param value the value to set.
   */
  public void setARG1HI(long value) {
    this.ARG1HI = value;
  }

  /**
   * Gets the value of the 'ARG1LO' field.
   * @return The value of the 'ARG1LO' field.
   */
  public long getARG1LO() {
    return ARG1LO;
  }


  /**
   * Sets the value of the 'ARG1LO' field.
   * @param value the value to set.
   */
  public void setARG1LO(long value) {
    this.ARG1LO = value;
  }

  /**
   * Gets the value of the 'ARG2HI' field.
   * @return The value of the 'ARG2HI' field.
   */
  public long getARG2HI() {
    return ARG2HI;
  }


  /**
   * Sets the value of the 'ARG2HI' field.
   * @param value the value to set.
   */
  public void setARG2HI(long value) {
    this.ARG2HI = value;
  }

  /**
   * Gets the value of the 'ARG2LO' field.
   * @return The value of the 'ARG2LO' field.
   */
  public long getARG2LO() {
    return ARG2LO;
  }


  /**
   * Sets the value of the 'ARG2LO' field.
   * @param value the value to set.
   */
  public void setARG2LO(long value) {
    this.ARG2LO = value;
  }

  /**
   * Gets the value of the 'BYTE1' field.
   * @return The value of the 'BYTE1' field.
   */
  public java.nio.ByteBuffer getBYTE1() {
    return BYTE1;
  }


  /**
   * Sets the value of the 'BYTE1' field.
   * @param value the value to set.
   */
  public void setBYTE1(java.nio.ByteBuffer value) {
    this.BYTE1 = value;
  }

  /**
   * Gets the value of the 'BYTE2' field.
   * @return The value of the 'BYTE2' field.
   */
  public java.nio.ByteBuffer getBYTE2() {
    return BYTE2;
  }


  /**
   * Sets the value of the 'BYTE2' field.
   * @param value the value to set.
   */
  public void setBYTE2(java.nio.ByteBuffer value) {
    this.BYTE2 = value;
  }

  /**
   * Gets the value of the 'CT' field.
   * @return The value of the 'CT' field.
   */
  public long getCT() {
    return CT;
  }


  /**
   * Sets the value of the 'CT' field.
   * @param value the value to set.
   */
  public void setCT(long value) {
    this.CT = value;
  }

  /**
   * Gets the value of the 'INST' field.
   * @return The value of the 'INST' field.
   */
  public long getINST() {
    return INST;
  }


  /**
   * Sets the value of the 'INST' field.
   * @param value the value to set.
   */
  public void setINST(long value) {
    this.INST = value;
  }

  /**
   * Gets the value of the 'OVERFLOW' field.
   * @return The value of the 'OVERFLOW' field.
   */
  public boolean getOVERFLOW() {
    return OVERFLOW;
  }


  /**
   * Sets the value of the 'OVERFLOW' field.
   * @param value the value to set.
   */
  public void setOVERFLOW(boolean value) {
    this.OVERFLOW = value;
  }

  /**
   * Gets the value of the 'RESHI' field.
   * @return The value of the 'RESHI' field.
   */
  public long getRESHI() {
    return RESHI;
  }


  /**
   * Sets the value of the 'RESHI' field.
   * @param value the value to set.
   */
  public void setRESHI(long value) {
    this.RESHI = value;
  }

  /**
   * Gets the value of the 'RESLO' field.
   * @return The value of the 'RESLO' field.
   */
  public long getRESLO() {
    return RESLO;
  }


  /**
   * Sets the value of the 'RESLO' field.
   * @param value the value to set.
   */
  public void setRESLO(long value) {
    this.RESLO = value;
  }

  /**
   * Gets the value of the 'STAMP' field.
   * @return The value of the 'STAMP' field.
   */
  public long getSTAMP() {
    return STAMP;
  }


  /**
   * Sets the value of the 'STAMP' field.
   * @param value the value to set.
   */
  public void setSTAMP(long value) {
    this.STAMP = value;
  }

  /**
   * Creates a new AvroAddTrace RecordBuilder.
   * @return A new AvroAddTrace RecordBuilder
   */
  public static AvroAddTrace.Builder newBuilder() {
    return new AvroAddTrace.Builder();
  }

  /**
   * Creates a new AvroAddTrace RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AvroAddTrace RecordBuilder
   */
  public static AvroAddTrace.Builder newBuilder(AvroAddTrace.Builder other) {
    if (other == null) {
      return new AvroAddTrace.Builder();
    } else {
      return new AvroAddTrace.Builder(other);
    }
  }

  /**
   * Creates a new AvroAddTrace RecordBuilder by copying an existing AvroAddTrace instance.
   * @param other The existing instance to copy.
   * @return A new AvroAddTrace RecordBuilder
   */
  public static AvroAddTrace.Builder newBuilder(AvroAddTrace other) {
    if (other == null) {
      return new AvroAddTrace.Builder();
    } else {
      return new AvroAddTrace.Builder(other);
    }
  }

  /**
   * RecordBuilder for AvroAddTrace instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AvroAddTrace>
    implements org.apache.avro.data.RecordBuilder<AvroAddTrace> {

    private long ACC1;
    private long ACC2;
    private long ARG1HI;
    private long ARG1LO;
    private long ARG2HI;
    private long ARG2LO;
    private java.nio.ByteBuffer BYTE1;
    private java.nio.ByteBuffer BYTE2;
    private long CT;
    private long INST;
    private boolean OVERFLOW;
    private long RESHI;
    private long RESLO;
    private long STAMP;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(AvroAddTrace.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.ACC1)) {
        this.ACC1 = data().deepCopy(fields()[0].schema(), other.ACC1);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.ACC2)) {
        this.ACC2 = data().deepCopy(fields()[1].schema(), other.ACC2);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.ARG1HI)) {
        this.ARG1HI = data().deepCopy(fields()[2].schema(), other.ARG1HI);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.ARG1LO)) {
        this.ARG1LO = data().deepCopy(fields()[3].schema(), other.ARG1LO);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.ARG2HI)) {
        this.ARG2HI = data().deepCopy(fields()[4].schema(), other.ARG2HI);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.ARG2LO)) {
        this.ARG2LO = data().deepCopy(fields()[5].schema(), other.ARG2LO);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.BYTE1)) {
        this.BYTE1 = data().deepCopy(fields()[6].schema(), other.BYTE1);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.BYTE2)) {
        this.BYTE2 = data().deepCopy(fields()[7].schema(), other.BYTE2);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.CT)) {
        this.CT = data().deepCopy(fields()[8].schema(), other.CT);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.INST)) {
        this.INST = data().deepCopy(fields()[9].schema(), other.INST);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.OVERFLOW)) {
        this.OVERFLOW = data().deepCopy(fields()[10].schema(), other.OVERFLOW);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.RESHI)) {
        this.RESHI = data().deepCopy(fields()[11].schema(), other.RESHI);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.RESLO)) {
        this.RESLO = data().deepCopy(fields()[12].schema(), other.RESLO);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.STAMP)) {
        this.STAMP = data().deepCopy(fields()[13].schema(), other.STAMP);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
    }

    /**
     * Creates a Builder by copying an existing AvroAddTrace instance
     * @param other The existing instance to copy.
     */
    private Builder(AvroAddTrace other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.ACC1)) {
        this.ACC1 = data().deepCopy(fields()[0].schema(), other.ACC1);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.ACC2)) {
        this.ACC2 = data().deepCopy(fields()[1].schema(), other.ACC2);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.ARG1HI)) {
        this.ARG1HI = data().deepCopy(fields()[2].schema(), other.ARG1HI);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.ARG1LO)) {
        this.ARG1LO = data().deepCopy(fields()[3].schema(), other.ARG1LO);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.ARG2HI)) {
        this.ARG2HI = data().deepCopy(fields()[4].schema(), other.ARG2HI);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.ARG2LO)) {
        this.ARG2LO = data().deepCopy(fields()[5].schema(), other.ARG2LO);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.BYTE1)) {
        this.BYTE1 = data().deepCopy(fields()[6].schema(), other.BYTE1);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.BYTE2)) {
        this.BYTE2 = data().deepCopy(fields()[7].schema(), other.BYTE2);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.CT)) {
        this.CT = data().deepCopy(fields()[8].schema(), other.CT);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.INST)) {
        this.INST = data().deepCopy(fields()[9].schema(), other.INST);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.OVERFLOW)) {
        this.OVERFLOW = data().deepCopy(fields()[10].schema(), other.OVERFLOW);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.RESHI)) {
        this.RESHI = data().deepCopy(fields()[11].schema(), other.RESHI);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.RESLO)) {
        this.RESLO = data().deepCopy(fields()[12].schema(), other.RESLO);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.STAMP)) {
        this.STAMP = data().deepCopy(fields()[13].schema(), other.STAMP);
        fieldSetFlags()[13] = true;
      }
    }

    /**
      * Gets the value of the 'ACC1' field.
      * @return The value.
      */
    public long getACC1() {
      return ACC1;
    }


    /**
      * Sets the value of the 'ACC1' field.
      * @param value The value of 'ACC1'.
      * @return This builder.
      */
    public AvroAddTrace.Builder setACC1(long value) {
      validate(fields()[0], value);
      this.ACC1 = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'ACC1' field has been set.
      * @return True if the 'ACC1' field has been set, false otherwise.
      */
    public boolean hasACC1() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'ACC1' field.
      * @return This builder.
      */
    public AvroAddTrace.Builder clearACC1() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'ACC2' field.
      * @return The value.
      */
    public long getACC2() {
      return ACC2;
    }


    /**
      * Sets the value of the 'ACC2' field.
      * @param value The value of 'ACC2'.
      * @return This builder.
      */
    public AvroAddTrace.Builder setACC2(long value) {
      validate(fields()[1], value);
      this.ACC2 = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'ACC2' field has been set.
      * @return True if the 'ACC2' field has been set, false otherwise.
      */
    public boolean hasACC2() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'ACC2' field.
      * @return This builder.
      */
    public AvroAddTrace.Builder clearACC2() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'ARG1HI' field.
      * @return The value.
      */
    public long getARG1HI() {
      return ARG1HI;
    }


    /**
      * Sets the value of the 'ARG1HI' field.
      * @param value The value of 'ARG1HI'.
      * @return This builder.
      */
    public AvroAddTrace.Builder setARG1HI(long value) {
      validate(fields()[2], value);
      this.ARG1HI = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'ARG1HI' field has been set.
      * @return True if the 'ARG1HI' field has been set, false otherwise.
      */
    public boolean hasARG1HI() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'ARG1HI' field.
      * @return This builder.
      */
    public AvroAddTrace.Builder clearARG1HI() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'ARG1LO' field.
      * @return The value.
      */
    public long getARG1LO() {
      return ARG1LO;
    }


    /**
      * Sets the value of the 'ARG1LO' field.
      * @param value The value of 'ARG1LO'.
      * @return This builder.
      */
    public AvroAddTrace.Builder setARG1LO(long value) {
      validate(fields()[3], value);
      this.ARG1LO = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'ARG1LO' field has been set.
      * @return True if the 'ARG1LO' field has been set, false otherwise.
      */
    public boolean hasARG1LO() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'ARG1LO' field.
      * @return This builder.
      */
    public AvroAddTrace.Builder clearARG1LO() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'ARG2HI' field.
      * @return The value.
      */
    public long getARG2HI() {
      return ARG2HI;
    }


    /**
      * Sets the value of the 'ARG2HI' field.
      * @param value The value of 'ARG2HI'.
      * @return This builder.
      */
    public AvroAddTrace.Builder setARG2HI(long value) {
      validate(fields()[4], value);
      this.ARG2HI = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'ARG2HI' field has been set.
      * @return True if the 'ARG2HI' field has been set, false otherwise.
      */
    public boolean hasARG2HI() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'ARG2HI' field.
      * @return This builder.
      */
    public AvroAddTrace.Builder clearARG2HI() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'ARG2LO' field.
      * @return The value.
      */
    public long getARG2LO() {
      return ARG2LO;
    }


    /**
      * Sets the value of the 'ARG2LO' field.
      * @param value The value of 'ARG2LO'.
      * @return This builder.
      */
    public AvroAddTrace.Builder setARG2LO(long value) {
      validate(fields()[5], value);
      this.ARG2LO = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'ARG2LO' field has been set.
      * @return True if the 'ARG2LO' field has been set, false otherwise.
      */
    public boolean hasARG2LO() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'ARG2LO' field.
      * @return This builder.
      */
    public AvroAddTrace.Builder clearARG2LO() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'BYTE1' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getBYTE1() {
      return BYTE1;
    }


    /**
      * Sets the value of the 'BYTE1' field.
      * @param value The value of 'BYTE1'.
      * @return This builder.
      */
    public AvroAddTrace.Builder setBYTE1(java.nio.ByteBuffer value) {
      validate(fields()[6], value);
      this.BYTE1 = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'BYTE1' field has been set.
      * @return True if the 'BYTE1' field has been set, false otherwise.
      */
    public boolean hasBYTE1() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'BYTE1' field.
      * @return This builder.
      */
    public AvroAddTrace.Builder clearBYTE1() {
      BYTE1 = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'BYTE2' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getBYTE2() {
      return BYTE2;
    }


    /**
      * Sets the value of the 'BYTE2' field.
      * @param value The value of 'BYTE2'.
      * @return This builder.
      */
    public AvroAddTrace.Builder setBYTE2(java.nio.ByteBuffer value) {
      validate(fields()[7], value);
      this.BYTE2 = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'BYTE2' field has been set.
      * @return True if the 'BYTE2' field has been set, false otherwise.
      */
    public boolean hasBYTE2() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'BYTE2' field.
      * @return This builder.
      */
    public AvroAddTrace.Builder clearBYTE2() {
      BYTE2 = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'CT' field.
      * @return The value.
      */
    public long getCT() {
      return CT;
    }


    /**
      * Sets the value of the 'CT' field.
      * @param value The value of 'CT'.
      * @return This builder.
      */
    public AvroAddTrace.Builder setCT(long value) {
      validate(fields()[8], value);
      this.CT = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'CT' field has been set.
      * @return True if the 'CT' field has been set, false otherwise.
      */
    public boolean hasCT() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'CT' field.
      * @return This builder.
      */
    public AvroAddTrace.Builder clearCT() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'INST' field.
      * @return The value.
      */
    public long getINST() {
      return INST;
    }


    /**
      * Sets the value of the 'INST' field.
      * @param value The value of 'INST'.
      * @return This builder.
      */
    public AvroAddTrace.Builder setINST(long value) {
      validate(fields()[9], value);
      this.INST = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'INST' field has been set.
      * @return True if the 'INST' field has been set, false otherwise.
      */
    public boolean hasINST() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'INST' field.
      * @return This builder.
      */
    public AvroAddTrace.Builder clearINST() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'OVERFLOW' field.
      * @return The value.
      */
    public boolean getOVERFLOW() {
      return OVERFLOW;
    }


    /**
      * Sets the value of the 'OVERFLOW' field.
      * @param value The value of 'OVERFLOW'.
      * @return This builder.
      */
    public AvroAddTrace.Builder setOVERFLOW(boolean value) {
      validate(fields()[10], value);
      this.OVERFLOW = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'OVERFLOW' field has been set.
      * @return True if the 'OVERFLOW' field has been set, false otherwise.
      */
    public boolean hasOVERFLOW() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'OVERFLOW' field.
      * @return This builder.
      */
    public AvroAddTrace.Builder clearOVERFLOW() {
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'RESHI' field.
      * @return The value.
      */
    public long getRESHI() {
      return RESHI;
    }


    /**
      * Sets the value of the 'RESHI' field.
      * @param value The value of 'RESHI'.
      * @return This builder.
      */
    public AvroAddTrace.Builder setRESHI(long value) {
      validate(fields()[11], value);
      this.RESHI = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'RESHI' field has been set.
      * @return True if the 'RESHI' field has been set, false otherwise.
      */
    public boolean hasRESHI() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'RESHI' field.
      * @return This builder.
      */
    public AvroAddTrace.Builder clearRESHI() {
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'RESLO' field.
      * @return The value.
      */
    public long getRESLO() {
      return RESLO;
    }


    /**
      * Sets the value of the 'RESLO' field.
      * @param value The value of 'RESLO'.
      * @return This builder.
      */
    public AvroAddTrace.Builder setRESLO(long value) {
      validate(fields()[12], value);
      this.RESLO = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'RESLO' field has been set.
      * @return True if the 'RESLO' field has been set, false otherwise.
      */
    public boolean hasRESLO() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'RESLO' field.
      * @return This builder.
      */
    public AvroAddTrace.Builder clearRESLO() {
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'STAMP' field.
      * @return The value.
      */
    public long getSTAMP() {
      return STAMP;
    }


    /**
      * Sets the value of the 'STAMP' field.
      * @param value The value of 'STAMP'.
      * @return This builder.
      */
    public AvroAddTrace.Builder setSTAMP(long value) {
      validate(fields()[13], value);
      this.STAMP = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'STAMP' field has been set.
      * @return True if the 'STAMP' field has been set, false otherwise.
      */
    public boolean hasSTAMP() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'STAMP' field.
      * @return This builder.
      */
    public AvroAddTrace.Builder clearSTAMP() {
      fieldSetFlags()[13] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AvroAddTrace build() {
      try {
        AvroAddTrace record = new AvroAddTrace();
        record.ACC1 = fieldSetFlags()[0] ? this.ACC1 : (Long) defaultValue(fields()[0]);
        record.ACC2 = fieldSetFlags()[1] ? this.ACC2 : (Long) defaultValue(fields()[1]);
        record.ARG1HI = fieldSetFlags()[2] ? this.ARG1HI : (Long) defaultValue(fields()[2]);
        record.ARG1LO = fieldSetFlags()[3] ? this.ARG1LO : (Long) defaultValue(fields()[3]);
        record.ARG2HI = fieldSetFlags()[4] ? this.ARG2HI : (Long) defaultValue(fields()[4]);
        record.ARG2LO = fieldSetFlags()[5] ? this.ARG2LO : (Long) defaultValue(fields()[5]);
        record.BYTE1 = fieldSetFlags()[6] ? this.BYTE1 : (java.nio.ByteBuffer) defaultValue(fields()[6]);
        record.BYTE2 = fieldSetFlags()[7] ? this.BYTE2 : (java.nio.ByteBuffer) defaultValue(fields()[7]);
        record.CT = fieldSetFlags()[8] ? this.CT : (Long) defaultValue(fields()[8]);
        record.INST = fieldSetFlags()[9] ? this.INST : (Long) defaultValue(fields()[9]);
        record.OVERFLOW = fieldSetFlags()[10] ? this.OVERFLOW : (Boolean) defaultValue(fields()[10]);
        record.RESHI = fieldSetFlags()[11] ? this.RESHI : (Long) defaultValue(fields()[11]);
        record.RESLO = fieldSetFlags()[12] ? this.RESLO : (Long) defaultValue(fields()[12]);
        record.STAMP = fieldSetFlags()[13] ? this.STAMP : (Long) defaultValue(fields()[13]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AvroAddTrace>
    WRITER$ = (org.apache.avro.io.DatumWriter<AvroAddTrace>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AvroAddTrace>
    READER$ = (org.apache.avro.io.DatumReader<AvroAddTrace>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.ACC1);

    out.writeLong(this.ACC2);

    out.writeLong(this.ARG1HI);

    out.writeLong(this.ARG1LO);

    out.writeLong(this.ARG2HI);

    out.writeLong(this.ARG2LO);

    out.writeBytes(this.BYTE1);

    out.writeBytes(this.BYTE2);

    out.writeLong(this.CT);

    out.writeLong(this.INST);

    out.writeBoolean(this.OVERFLOW);

    out.writeLong(this.RESHI);

    out.writeLong(this.RESLO);

    out.writeLong(this.STAMP);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.ACC1 = in.readLong();

      this.ACC2 = in.readLong();

      this.ARG1HI = in.readLong();

      this.ARG1LO = in.readLong();

      this.ARG2HI = in.readLong();

      this.ARG2LO = in.readLong();

      this.BYTE1 = in.readBytes(this.BYTE1);

      this.BYTE2 = in.readBytes(this.BYTE2);

      this.CT = in.readLong();

      this.INST = in.readLong();

      this.OVERFLOW = in.readBoolean();

      this.RESHI = in.readLong();

      this.RESLO = in.readLong();

      this.STAMP = in.readLong();

    } else {
      for (int i = 0; i < 14; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.ACC1 = in.readLong();
          break;

        case 1:
          this.ACC2 = in.readLong();
          break;

        case 2:
          this.ARG1HI = in.readLong();
          break;

        case 3:
          this.ARG1LO = in.readLong();
          break;

        case 4:
          this.ARG2HI = in.readLong();
          break;

        case 5:
          this.ARG2LO = in.readLong();
          break;

        case 6:
          this.BYTE1 = in.readBytes(this.BYTE1);
          break;

        case 7:
          this.BYTE2 = in.readBytes(this.BYTE2);
          break;

        case 8:
          this.CT = in.readLong();
          break;

        case 9:
          this.INST = in.readLong();
          break;

        case 10:
          this.OVERFLOW = in.readBoolean();
          break;

        case 11:
          this.RESHI = in.readLong();
          break;

        case 12:
          this.RESLO = in.readLong();
          break;

        case 13:
          this.STAMP = in.readLong();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










