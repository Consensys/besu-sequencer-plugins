/*
 * Copyright ConsenSys AG.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

package net.consensys.linea.zktracer.opcode;

import java.util.HashMap;
import java.util.Map;

import net.consensys.linea.zktracer.opcode.mxp.MxpSettings;
import net.consensys.linea.zktracer.opcode.stack.Pattern;
import net.consensys.linea.zktracer.opcode.stack.StackSettings;

public enum OpCode {
  STOP(
      0x00,
      InstructionFamily.Halt,
      new StackSettings(
          Pattern.ZeroZero, 0, 0, 0, 0, Gas.gZero, false, false, false, false, false, true, false),
      new RamSettings(),
      new MxpSettings()),
  ADD(
      0x01,
      InstructionFamily.Add,
      new StackSettings(
          Pattern.TwoOne,
          1,
          2,
          1,
          2,
          Gas.gVeryLow,
          false,
          false,
          false,
          false,
          false,
          false,
          false),
      new RamSettings(),
      new MxpSettings()),
  MUL(
      0x02,
      InstructionFamily.Mul,
      new StackSettings(
          Pattern.TwoOne, 1, 2, 1, 2, Gas.gLow, false, false, false, false, false, false, false),
      new RamSettings(),
      new MxpSettings()),
  SUB(
      0x03,
      InstructionFamily.Add,
      new StackSettings(
          Pattern.TwoOne,
          1,
          2,
          1,
          2,
          Gas.gVeryLow,
          false,
          false,
          false,
          false,
          false,
          false,
          false),
      new RamSettings(),
      new MxpSettings()),
  DIV(
      0x04,
      InstructionFamily.Mod,
      new StackSettings(
          Pattern.TwoOne, 1, 2, 1, 2, Gas.gLow, false, false, false, false, false, false, false),
      new RamSettings(),
      new MxpSettings()),
  SDIV(
      0x05,
      InstructionFamily.Mod,
      new StackSettings(
          Pattern.TwoOne, 1, 2, 1, 2, Gas.gLow, false, false, false, false, false, false, false),
      new RamSettings(),
      new MxpSettings()),
  MOD(
      0x06,
      InstructionFamily.Mod,
      new StackSettings(
          Pattern.TwoOne, 1, 2, 1, 2, Gas.gLow, false, false, false, false, false, false, false),
      new RamSettings(),
      new MxpSettings()),
  SMOD(
      0x07,
      InstructionFamily.Mod,
      new StackSettings(
          Pattern.TwoOne, 1, 2, 1, 2, Gas.gLow, false, false, false, false, false, false, false),
      new RamSettings(),
      new MxpSettings()),
  ADDMOD(
      0x8,
      InstructionFamily.Ext,
      new StackSettings(
          Pattern.ThreeOne, 1, 3, 1, 3, Gas.gLow, false, false, false, false, false, false, false),
      new RamSettings(),
      new MxpSettings()),
  MULMOD(
      0x9,
      InstructionFamily.Ext,
      new StackSettings(
          Pattern.ThreeOne, 1, 3, 1, 3, Gas.gLow, false, false, false, false, false, false, false),
      new RamSettings(),
      new MxpSettings()),
  EXP(
      0xa,
      InstructionFamily.Mul,
      new StackSettings(
          Pattern.TwoOne, 1, 2, 1, 2, Gas.gExp, false, false, false, false, false, false, false),
      new RamSettings(),
      new MxpSettings()),
  SIGNEXTEND(
      0xb,
      InstructionFamily.Bin,
      new StackSettings(
          Pattern.TwoOne,
          1,
          2,
          1,
          2,
          Gas.gVeryLow,
          false,
          false,
          false,
          false,
          false,
          false,
          false),
      new RamSettings(),
      new MxpSettings()),
  LT(
      0x10,
      InstructionFamily.Wcp,
      new StackSettings(
          Pattern.TwoOne,
          1,
          2,
          1,
          2,
          Gas.gVeryLow,
          false,
          false,
          false,
          false,
          false,
          false,
          false),
      new RamSettings(),
      new MxpSettings()),
  GT(
      0x11,
      InstructionFamily.Wcp,
      new StackSettings(
          Pattern.TwoOne,
          1,
          2,
          1,
          2,
          Gas.gVeryLow,
          false,
          false,
          false,
          false,
          false,
          false,
          false),
      new RamSettings(),
      new MxpSettings()),
  SLT(
      0x12,
      InstructionFamily.Wcp,
      new StackSettings(
          Pattern.TwoOne,
          1,
          2,
          1,
          2,
          Gas.gVeryLow,
          false,
          false,
          false,
          false,
          false,
          false,
          false),
      new RamSettings(),
      new MxpSettings()),
  SGT(
      0x13,
      InstructionFamily.Wcp,
      new StackSettings(
          Pattern.TwoOne,
          1,
          2,
          1,
          2,
          Gas.gVeryLow,
          false,
          false,
          false,
          false,
          false,
          false,
          false),
      new RamSettings(),
      new MxpSettings()),
  EQ(
      0x14,
      InstructionFamily.Wcp,
      new StackSettings(
          Pattern.TwoOne,
          1,
          2,
          1,
          2,
          Gas.gVeryLow,
          false,
          false,
          false,
          false,
          false,
          false,
          false),
      new RamSettings(),
      new MxpSettings()),
  ISZERO(
      0x14,
      InstructionFamily.Wcp,
      new StackSettings(
          Pattern.OneOne, 1, 1, 1, 1, Gas.gVeryLow, false, false, false, true, false, false, false),
      new RamSettings(),
      new MxpSettings()),
  AND(
      0x16,
      InstructionFamily.Bin,
      new StackSettings(
          Pattern.TwoOne,
          1,
          2,
          1,
          2,
          Gas.gVeryLow,
          false,
          false,
          false,
          false,
          false,
          false,
          false),
      new RamSettings(),
      new MxpSettings()),
  OR(
      0x17,
      InstructionFamily.Bin,
      new StackSettings(
          Pattern.TwoOne,
          1,
          2,
          1,
          2,
          Gas.gVeryLow,
          false,
          false,
          false,
          false,
          false,
          false,
          false),
      new RamSettings(),
      new MxpSettings()),
  XOR(
      0x18,
      InstructionFamily.Bin,
      new StackSettings(
          Pattern.TwoOne,
          1,
          2,
          1,
          2,
          Gas.gVeryLow,
          false,
          false,
          false,
          false,
          false,
          false,
          false),
      new RamSettings(),
      new MxpSettings()),
  NOT(
      0x19,
      InstructionFamily.Bin,
      new StackSettings(
          Pattern.OneOne, 1, 1, 1, 1, Gas.gVeryLow, false, false, false, true, false, false, false),
      new RamSettings(),
      new MxpSettings()),
  BYTE(
      0x1a,
      InstructionFamily.Bin,
      new StackSettings(
          Pattern.TwoOne,
          1,
          2,
          1,
          2,
          Gas.gVeryLow,
          false,
          false,
          false,
          false,
          false,
          false,
          false),
      new RamSettings(),
      new MxpSettings()),
  SHL(
      0x1b,
      InstructionFamily.Shf,
      new StackSettings(
          Pattern.TwoOne,
          1,
          2,
          1,
          2,
          Gas.gVeryLow,
          false,
          false,
          false,
          false,
          false,
          false,
          false),
      new RamSettings(),
      new MxpSettings()),
  SHR(
      0x1c,
      InstructionFamily.Shf,
      new StackSettings(
          Pattern.TwoOne,
          1,
          2,
          1,
          2,
          Gas.gVeryLow,
          false,
          false,
          false,
          false,
          false,
          false,
          false),
      new RamSettings(),
      new MxpSettings()),
  SAR(
      0x1d,
      InstructionFamily.Shf,
      new StackSettings(
          Pattern.TwoOne,
          1,
          2,
          1,
          2,
          Gas.gVeryLow,
          false,
          false,
          false,
          false,
          false,
          false,
          false),
      new RamSettings(),
      new MxpSettings()),

  SHA3(
      0x20,
      ),
  ADDRESS(
      0x30,
      ),
  BALANCE(
      0x31,
      ),
  ORIGIN(
      0x32,
      ),
  CALLER(
      0x33,
      f),
  CALLVALUE(
      0x34,
      ),
  CALLDATALOAD(
      0x35,
      ),
  CALLDATASIZE(
      0x36,
      ),
  CALLDATACOPY(
      0x37,
      s,
  CODESIZE(
      0x38,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  CODECOPY(
      0x39,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  GASPRICE(
      0x3a,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  EXTCODESIZE(
      0x3b,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  EXTCODECOPY(
      0x3c,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  RETURNDATASIZE(
      0x3d,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  RETURNDATACOPY(
      0x3e,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  EXTCODEHASH(
      0x3f,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  BLOCKHASH(
      0x40,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  COINBASE(
      0x41,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  TIMESTAMP(
      0x42,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  NUMBER(
      0x43,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  DIFFICULTY(
      0x44,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  GASLIMIT(
      0x45,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  CHAINID(
      0x46,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  SELFBALANCE(
      0x47,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  BASEFEE(
      0x48,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  POP(
      0x50,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  MLOAD(
      0x51,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  MSTORE(
      0x52,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  MSTORE8(
      0x53,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  SLOAD(
      0x54,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  SSTORE(
      0x55,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  JUMP(
      0x56,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  JUMPI(
      0x57,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  PC(
      0x58,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  MSIZE(
      0x59,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  GAS(
      0x5a,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  JUMPDEST(
      0x5b,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  PUSH0(
      0x5f,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  PUSH1(
      0x60,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  PUSH2(
      0x61,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  PUSH3(
      0x62,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  PUSH4(
      0x63,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  PUSH5(
      0x64,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  PUSH6(
      0x65,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  PUSH7(
      0x66,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  PUSH8(
      0x67,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  PUSH9(
      0x68,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  PUSH10(
      0x69,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  PUSH11(
      0x6a,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  PUSH12(
      0x6b,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  PUSH13(
      0x6c,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  PUSH14(
      0x6d,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  PUSH15(
      0x6e,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  PUSH16(
      0x6f,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  PUSH17(
      0x70,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  PUSH18(
      0x71,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  PUSH19(
      0x72,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  PUSH20(
      0x73,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  PUSH21(
      0x74,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  PUSH22(
      0x75,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  PUSH23(
      0x76,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  PUSH24(
      0x77,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  PUSH25(
      0x78,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  PUSH26(
      0x79,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  PUSH27(
      0x7a,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  PUSH28(
      0x7b,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  PUSH29(
      0x7c,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  PUSH30(
      0x7d,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  PUSH31(
      0x7e,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  PUSH32(
      0x7f,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  DUP1(
      0x80,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  DUP2(
      0x81,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  DUP3(
      0x82,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  DUP4(
      0x83,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  DUP5(
      0x84,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  DUP6(
      0x85,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  DUP7(
      0x86,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  DUP8(
      0x87,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  DUP9(
      0x88,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  DUP10(
      0x89,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  DUP11(
      0x8a,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  DUP12(
      0x8b,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  DUP13(
      0x8c,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  DUP14(
      0x8d,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  DUP15(
      0x8e,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  DUP16(
      0x8f,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  SWAP1(
      0x90,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  SWAP2(
      0x91,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  SWAP3(
      0x92,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  SWAP4(
      0x93,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  SWAP5(
      0x94,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  SWAP6(
      0x95,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  SWAP7(
      0x96,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  SWAP8(
      0x97,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  SWAP9(
      0x98,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  SWAP10(
      0x99,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  SWAP11(
      0x9a,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  SWAP12(
      0x9b,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  SWAP13(
      0x9c,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  SWAP14(
      0x9d,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  SWAP15(
      0x9e,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  SWAP16(
      0x9f,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  LOG0(
      0xa0,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  LOG1(
      0xa1,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  LOG2(
      0xa2,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  LOG3(
      0xa3,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  LOG4(
      0xa4,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  CREATE(
      0xf0,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  CALL(
      0xf1,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  CALLCODE(
      0xf2,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  RETURN(
      0xf3,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  DELEGATECALL(
      0xf4,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  CREATE2(
      0xf5,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  STATICCALL(
      0xfa,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  REVERT(
      0xfd,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  INVALID(
      0xfe,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings),
  SELFDESTRUCT(
      0xff,
      flags,
      arithmeticFlags,
      stackSettings,
      memoryFlags,
      moduleFlags,
      ramSettings,
      ramFlag,
      mxpSettings);

  public final long value;
  public final InstructionFamily family;
  public final StackSettings stackSettings;
  public final RamSettings ramSettings;
  public final MxpSettings mxpSettings;

  private static final Map<Long, OpCode> BY_VALUE = new HashMap<>(values().length);

  static {
    for (OpCode o : values()) {
      BY_VALUE.put(o.value, o);
    }
  }

  OpCode(
      final int value,
      InstructionFamily family,
      StackSettings stackSettings,
      RamSettings ramSettings,
      MxpSettings mxpSettings) {
    this.value = value;
    this.family = family;
    this.stackSettings = stackSettings;
    this.ramSettings = ramSettings;
    this.mxpSettings = mxpSettings;
  }

  public static OpCode of(final long value) {
    if (!BY_VALUE.containsKey(value)) {
      throw new AssertionError("No OpCode with value " + value + " is defined.");
    }

    return BY_VALUE.get(value);
  }

  public int numberOfArguments() {
    return this.stackSettings.nbRemoved();
  }
}
