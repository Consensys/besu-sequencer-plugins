/*
 * Copyright ConsenSys AG.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

plugins {
  id 'java'
  id 'common-plugins'
  id 'com.github.hierynomus.license'
  id "de.undercouch.download"
}

def blockchainReferenceTests = tasks.register("blockchainReferenceTests")  {
  final referenceTestsPath = "src/reference-test/resources/BlockchainTests"
  final generatedTestsPath = "src/reference-test/java/net/consensys/linea/generated/"
  inputs.files fileTree(referenceTestsPath),
    fileTree(generatedTestsPath)
  outputs.files generatedTestsPath
  generateTestFiles(
    fileTree(referenceTestsPath),
    file("src/reference-test/templates/BlockchainReferenceTest.java.template"),
    "BlockchainTests",
    "$generatedTestsPath/vm/blockchain",
    "BlockchainReferenceTest",
    ("BlockchainTests/InvalidBlocks/bcExpectSection") // exclude test for test filling tool
    )
}

def generalstateReferenceTests = tasks.register("generalstateReferenceTests")  {
  final referenceTestsPath = "src/reference-test/resources/GeneralStateTests"
  final generatedTestsPath = "src/reference-test/java/net/consensys/linea/generated/"
  inputs.files fileTree(referenceTestsPath),
    fileTree(generatedTestsPath)
  outputs.files generatedTestsPath
  generateTestFiles(
    fileTree(referenceTestsPath),
    file("src/reference-test/templates/GeneralStateReferenceTest.java.template"),
    "GeneralStateTests",
    "$generatedTestsPath/vm/generalState",
    "GeneralStateReferenceTest"
    )
}

def generateTestFiles(FileTree jsonPath, File templateFile, String pathstrip, String destination, String namePrefix, String ... excludedPath) {
  mkdir(destination)
  def referenceTestTemplate = templateFile.text

  // This is how many json files to include in each test file
  def fileSets = jsonPath.getFiles().collate(5)

  fileSets.eachWithIndex { fileSet, idx ->
    def paths = []
    fileSet.each { testJsonFile ->
      def parentFile = testJsonFile.getParentFile()
      def parentPathFile = parentFile.getPath().substring(parentFile.getPath().indexOf(pathstrip))
      if (!testJsonFile.getName().toString().startsWith(".") && !excludedPath.contains(parentPathFile)) {
        def pathFile = testJsonFile.getPath()
        paths << pathFile.substring(pathFile.indexOf(pathstrip))
      }
    }

    def testFile = file(destination + "/" + namePrefix + "_" + idx + ".java")
    def allPaths = '"' + paths.join('", "') + '"'

    def testFileContents = referenceTestTemplate
      .replaceAll("%%TESTS_FILE%%", allPaths)
      .replaceAll("%%TESTS_NAME%%", namePrefix + "_" + idx)
    testFile.newWriter().withWriter { w -> w << testFileContents }
  }
}

sourceSets {
  referenceTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDirs "src/reference-test/java",
        blockchainReferenceTests
      generalstateReferenceTests
    }
    resources.srcDir file("src/reference-test/resources")
  }
}

apply from: rootProject.file("gradle/allprojects.gradle")

dependencies {
  // annotationProcessor generates the file META-INF/services/org.hyperledger.besu.plugin.BesuPlugin
  annotationProcessor 'com.google.auto.service:auto-service'
  compileOnly "$besuArtifactGroup:evm:$besuVersion"
  compileOnly 'com.google.auto.service:auto-service'
  compileOnly 'com.google.auto.service:auto-service-annotations'

  implementation "$besuArtifactGroup:plugin-api:$besuVersion"
  implementation "${besuArtifactGroup}.internal:core:$besuVersion"
  implementation "$besuArtifactGroup:besu-datatypes:$besuVersion"
  implementation "${besuArtifactGroup}.internal:rlp:$besuVersion"
  implementation "$besuArtifactGroup:evm:$besuVersion"
  implementation "${besuArtifactGroup}.internal:algorithms:$besuVersion"

  implementation 'info.picocli:picocli'

  compileOnly 'io.vertx:vertx-core'

  implementation 'com.fasterxml.jackson.core:jackson-databind'
  implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml'

  implementation 'org.apache.tuweni:tuweni-bytes'
  implementation 'org.apache.tuweni:tuweni-units'

  implementation 'org.bouncycastle:bcprov-jdk18on'

  testImplementation "$besuArtifactGroup:evm:$besuVersion"
  testImplementation "${besuArtifactGroup}.internal:core:$besuVersion"
  testImplementation "${besuArtifactGroup}.internal:rlp:$besuVersion"
  testImplementation "$besuArtifactGroup:besu-datatypes:$besuVersion"
  testImplementation "${besuArtifactGroup}.internal:core:$besuVersion"

  referenceTestImplementation "$besuArtifactGroup:besu-datatypes:$besuVersion"
  referenceTestImplementation "$besuArtifactGroup:evm:$besuVersion"
  referenceTestImplementation "${besuArtifactGroup}.internal:config:$besuVersion"
  referenceTestImplementation "${besuArtifactGroup}.internal:core:$besuVersion"
  referenceTestImplementation "${besuArtifactGroup}.internal:algorithms:$besuVersion"
  referenceTestImplementation "${besuArtifactGroup}.internal:metrics-core:$besuVersion"
  referenceTestImplementation "${besuArtifactGroup}.internal:referencetests:$besuVersion"
  referenceTestImplementation "${besuArtifactGroup}.internal:rlp:$besuVersion"
  referenceTestImplementation "${besuArtifactGroup}.internal:testutil:$besuVersion"
  referenceTestImplementation "${besuArtifactGroup}.internal:trie:$besuVersion"
  referenceTestImplementation "${besuArtifactGroup}.internal:util:$besuVersion"
  referenceTestImplementation "$besuArtifactGroup:plugin-api:$besuVersion"

  referenceTestImplementation 'org.apache.tuweni:tuweni-bytes'
  referenceTestImplementation 'org.apache.tuweni:tuweni-units'

  referenceTestImplementation 'com.google.guava:guava'
  referenceTestImplementation 'org.assertj:assertj-core'

  referenceTestImplementation 'org.junit.jupiter:junit-jupiter-api'
  referenceTestImplementation 'org.junit.jupiter:junit-jupiter-engine'
  referenceTestImplementation 'org.junit.jupiter:junit-jupiter-params'
  referenceTestImplementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8'
  referenceTestImplementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml'
}

configurations {
  installedJars {
    transitive = false
  }
}

tasks.register('referenceTests', Test) {
  useJUnitPlatform()
  description = 'Runs ETH reference tests.'
  beforeTest {
    if (!file("src/reference-test/resources/README.md").exists()) {
      throw new GradleException("src/reference-test/resources/README.md missing: please update the submodules (git submodule update --init --recursive)")
    }
  }

  testClassesDirs = sourceSets.referenceTest.output.classesDirs
  classpath = sourceSets.referenceTest.runtimeClasspath
}

clean.doFirst {
  delete "src/reference-test/java/net/consensys/linea/generated/vm"
}

apply from: rootProject.file("gradle/dist.gradle")
apply from: rootProject.file("gradle/publishing.gradle")
